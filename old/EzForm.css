

/* ==============
Default values
=============== */

:root {
    --sb-theme-color: #3F00FF;
    --sb-error-color: #c83232;
    --sb-color: #000;
    --sb-background: white;
    --sb-border-radius: 4px;
    --sb-margin: 2.5em;
    --sb-padding: 5px;
    --sb-gap: 5px;

    --sb-label-color: #747474;
    --sb-label-padding: 0 5px;
    --sb-label-focus-offset-y: calc(-50% + .7em);

    --sb-input-padding: 1rem 0 0 .5rem; 
    --sb-input-background: none;
    --sb-input-border-color: transparent;

    --sb-btn-padding: .5em 1.25em; 
}
     
@keyframes error {
    45%, 55% { color: var(--sb-error-color); }
}


/* ==============
generic styles
=============== */

.input,
.input * {
    box-sizing: border-box;
}


.sb-form .input :not(li) {
    order: 1;

    border-radius: var(--sb-border-radius);

    align-self: stretch;
    display: flex;
    align-items: center;
    flex-grow: 1;
}

.sb-form .input :focus {
    outline: var(--sb-outline, var(--sb-outline-color, var(--sb-theme-color) solid 1px));
    outline-offset: var(--sb-outline-offset, 2px);
}

.sb-form .input :is(
    input:not(
        [type="button"],
        [type="submit"],
        [type="reset"]
    ),
    textarea,
    select
) {
    order: 2;
}

.sb-form .input label ~ * {
    order: 3;
    z-index: 1;
}


.sb-form .input :is(
    input,
    button,
    textarea,
    select,
    label
) {
    cursor: pointer;

}


.sb-form .input :is(
    input:not(
        [type="submit"],
        [type="reset"],
        [type="button"],
        [type="radio"],
        [type="checkbox"]
    ),
    :is(
        input:is(
            [type="submit"],
            [type="reset"],
            [type="button"]
        ),
        button
    ):not(
        :is(
            input:not(
                [type="submit"],
                [type="reset"],
                [type="button"]
            ),
            textarea,
            select
        ) ~ *
    ),    
    textarea,
    select,
    .grow
) {
    flex-grow: 100;
}

.sb-form .input hr {
    width: 100%;
    color: var(--sb-theme-color);
}

.sb-form .input :is([role="alert"], [role="note"])::before,
.sb-form .input :is(
    button,
    [type="button"],
    [type="submit"],
    [type="reset"]
).reveal:empty {
    mask-image: var(--sb-svg);
    -webkit-mask-image: var(--sb-svg);
    
    mask-position: center ;
    -webkit-mask-position: center ;
    
    mask-repeat: no-repeat;
    -webkit-mask-repeat: no-repeat;
}

.sb-form .input:not(ol, ul),
.sb-form .input > li {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    width: 100%;

    row-gap: var(--sb-gap-y, var(--sb-gap));
    column-gap: var(--sb-gap-x, var(--sb-gap));
}

.sb-form .input li:not(:last-child) {
    margin-bottom: var(--sb-gap-y, var(--sb-gap));
}



/* ==============
container
=============== */

.sb-form .input {
    position: relative;
    color: var(--sb-color);

    padding:  var(--sb-padding);

    margin: 0 0 var(--sb-margin) 0;

    border: var(--sb-border, none);
    border-bottom: var(--sb-border-bottom, var(--sb-border, solid var(--sb-border-color, var(--sb-theme-color)) 2px));
    border-top: var(--sb-border-top, var(--sb-border, none));
    border-left: var(--sb-border-left, var(--sb-border, none));
    border-right: var(--sb-border-right, var(--sb-border, none));
    
    box-shadow: var(--sb-shadow, 0px 0px 5px 1px var(--sb-shadow-color, #d3d3d3));
    border-radius: var(--sb-border-radius);

    background: var(--sb-background);
    width: 100%;
    min-height: 2.7rem;

}


/* ==============
generic input styles
=============== */

.sb-form .input :is(
    input,
    button,
    textarea,
    select
) {
    color: var(--sb-input-color, inherit);
    border: var(--sb-input-border, solid 1px var(--sb-input-border-color));
    background: var(--sb-input-background);
    padding: var(--sb-input-padding, 0 0 0 clamp(5px, calc(var(--sb-border-radius) / 2), 10px));
    width: 2em;
    font-size: .9rem;
}

.sb-form .input :is(
    input:not(
        [type="button"],
        [type="reset"],
        [type="submit"]
    ),
    textarea,
    select
) {
    box-shadow: var(--sb-input-shadow);
}

.sb-form .input :is(
    input,
    button,
    textarea,
    select
):not(.label-top *, [type="checkbox"], [type="radio"]) {
    min-height: 2.7rem;
}

.sb-form .input :is([readonly], :disabled):not(:is([type="radio"], [type="checkbox"], [type="color"]):not([role="switch"])) {
    cursor: not-allowed;
    opacity: .65;
}


/* ==============
input textarea
=============== */

.sb-form .input textarea {
    height: var(--sb-textarea-height, 70px);
}

.sb-form .input textarea ~ *  {
    align-self: flex-start;
}

.sb-form .input textarea ~ :is(
    button, 
    [type="submit"], 
    [type="reset"], 
    [type="button"]
):not(:is(
    button, 
    [type="submit"], 
    [type="reset"], 
    [type="button"]
    ) ~ *
) {
    width: 100%;
}

.sb-form .input textarea ~ button  {
    order: 4;
}

.sb-form .input textarea ~ .count {
    order: 4;
    width: 100%;
    justify-content: left;
    min-height: auto;
}



/* ==============
input checkbox / radio general
=============== */

.sb-form .input :is(
    [type="radio"],
    [type="checkbox"]
) {
    min-height: 1rem;
    height: 1rem;
    align-self: center;
    flex-grow: 0;
    min-width: 2.7rem;
    padding-top: 30px;
}

.sb-form .input :is(
    [type="radio"],
    [type="checkbox"],
) ~ label {
    flex-grow: 1;
    color: var(--sb-input-color);
    order: 2;
    justify-content: left;
}



/* ==============
input checkbox / radio switch
=============== */

.sb-form .input :is(
    [type="radio"],
    [type="checkbox"]
)[role="switch"] {
    padding: 0;
    min-width: 30px;
    margin: 0 5px;
    --sb-switch-border-default: 1px solid var(
        --sb-switch-border-color, 
        var(
            --sb-switch-background, 
            var(
                --sb-theme-color
            )
        )
    );
    border: var(
        --sb-switch-border, 
        var(--sb-switch-border-default)
    );
    background-image: radial-gradient(circle, var(--sb-switch-color, var(--sb-theme-color))  25%, transparent 30%);
    background-color: var(--sb-switch-background, transparent);
    background-position: -8px center;
    border-radius: 20px;
    transition: background-color .3s ease-out, background-position .3s ease-in-out, border .3s ease-out;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding: 0;
}

.sb-form .input :is(
    [type="radio"],
    [type="checkbox"]
)[role="switch"]:checked {
    background-image: radial-gradient(circle, var(--sb-switch-checked-color, var(--sb-switch-color, var(--sb-background))) 25%, transparent 30%);
    background-position: 8px center;
    background-color: var(--sb-switch-checked-background, var(--sb-theme-color));

    border: var(--sb-switch-checked-border, var(--sb-switch-border, transparent));
}



/* ==============
input radio overlapping icon, todo
=============== */




/* ==============
input color
=============== */

.sb-form .input [type="color"] {
    padding: 0 !important;
    align-self: stretch;
    height: auto;
}


/* ==============
input color inner color thing
=============== */

.sb-form .input ::-moz-color-swatch  {
    border-radius: var(--sb-border-radius);
    border: none;
}

.sb-form .input ::-webkit-color-swatch {
    border-radius: var(--sb-border-radius);
    border: none;
}

/* 
overlapping icon
*/


.sb-form .input [type="color"] ~ :is(
    label + i,
) 

{
    filter: drop-shadow(0 0 1px var(--sb-label-color)) 
            drop-shadow(0 0 1px var(--sb-label-color));
    color: var(--sb-background);
}

.sb-form .input [type="color"] ~ i:not(label ~ i) {
    background: red;
}

/* 
.sb-form .input [type="color"] ~ i:not(label ~ i):last-of-type {
    margin-right: calc(-2.7rem + var(--sb-gap-x, var(--sb-gap)) * -1);
} */

.sb-form .input [type="color"] ~ label + i {
    order: 2;
    margin-left: calc(-2.7rem + var(--sb-gap-x, var(--sb-gap)) * -1);
}

/* ==============
label
=============== */

.sb-form .input label {
    background: var(--sb-label-background, var(--sb-background));
    z-index: 1;
}

/* inner span for background color */
.sb-form .input label:not(
    :is(
        [type="checkbox"], 
        [type="radio"],
        [type="button"],
        [type="submit"],
        [type="reset"],
        select
    ) ~ label
) > * {
    transition: 
        color .3s ease-out,
        background .3s ease-out;

    line-height: normal;
    padding: var(--sb-label-padding);
    align-self: center;
    background: transparent;
}

.sb-form .input label:not(
    :is(
        [type="checkbox"], 
        [type="radio"],
        [type="button"],
        [type="submit"],
        [type="reset"],
        select
    ) ~ label
) {
    transition: 
        font-size .3s ease-out, 
        transform .3s ease-out, 
        left .3s ease-out;

    font-size: 1.1rem;
    color: var(--sb-label-color);

    max-width: 0;
    padding: 0;
    margin: 0 calc(var(--sb-gap-x, var(--sb-gap)) * -1) 0 0;

    white-space: nowrap;

    position: relative;
    left: calc(clamp(5px, calc(var(--sb-border-radius) / 2), 10px) + var(--sb-label-offset-x, 0px));

    pointer-events: none;

    transform: translateY(calc(var(--sb-label-offset-y, 0px)));

}



/* focus state */
.sb-form .input :is(
    input:not(
        [type="button"],
        [type="submit"],
        [type="reset"],
        [type="checkbox"],
        [type="radio"]
    ),
    textarea
):is(:focus, :not(:placeholder-shown)) ~ label { 
    font-size: .75rem;

    left: calc(clamp(5px, calc(var(--sb-border-radius) / 2), 10px) + var(--sb-label-focus-offset-x, 0px));


    transform: translateY(var(--sb-label-focus-offset-y));
}

.sb-form .input :is(
    input:not(
        [type="button"],
        [type="submit"],
        [type="reset"],
        [type="checkbox"],
        [type="radio"]
    ),
    textarea
):is(:focus, :not(:placeholder-shown)) ~ label > * {
    background: var(--sb-label-background, var(--sb-background));
}

/* invalid state */
.sb-form .input :is(
    [placeholder]:invalid:not(:required:placeholder-shown),
    [aria-invalid],
    [aria-errormessage]
):not([type="checkbox"], [type="radio"]) ~ label {
    animation: error 1.5s linear 0s infinite;
} 

/* required symbol */
.sb-form .input :is(:required, [min], [minlength]) ~ label > *::after { 
    content: var(--sb-required-text, '*'); 
    margin-left: 3px; 
    color: var(--sb-error-color);
    line-height: 0;
    order: 1;
}  



/* ==============
messages
=============== */
.sb-form .input :is(
    [role="alert"],
    [role="note"] 
) {
    justify-content: start;
    width: 100%;
    order: 5;
    min-height: 1.5rem;
}

.sb-form .input :is(
    [role="alert"],
    [role="note"]
)::before {
    content: '';
    text-align: center;
    align-self: flex-start;
    min-height: 1.5rem;
    min-width: 40px;
}


.sb-form .input [role="note"] {
    color: var(--sb-note-color, var(--sb-label-color));
}

.sb-form .input [role="note"]::before {
    background-color: var(--sb-note-icon-color, var(--sb-note-color, var(--sb-label-color)));
    --sb-svg: var(--sb-note-icon, url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-circle"><path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/><path d="m9 6.6-2.4.3v.4H7c.3.1.4.2.3.5l-.7 3.5c-.2.9 0 1.3.8 1.3a2 2 0 0 0 1.4-.6l.1-.4c-.2.2-.5.2-.7.2-.2 0-.3-.2-.3-.5l1-4.7zm0-2.1a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/></svg>'));
}



.sb-form .input [role="alert"] {
    color: var(--sb-alert-color, var(--sb-error-color));
}

.sb-form .input [role="alert"]::before {
    background-color: var(--sb-alert-icon-color, var(--sb-alert-color, var(--sb-error-color)));
    --sb-svg: var(--sb-alert-icon, url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-exclamation-triangle"><path d="M7.94 2.02A.13.13 0 0 1 8 2a.13.13 0 0 1 .07.02.15.15 0 0 1 .05.05l6.86 11.67c.03.06.03.12 0 .18a.16.16 0 0 1-.06.06.12.12 0 0 1-.06.02H1.15a.12.12 0 0 1-.07-.02.16.16 0 0 1-.05-.06.18.18 0 0 1 0-.18L7.88 2.07a.15.15 0 0 1 .06-.05zm1.04-.45a1.13 1.13 0 0 0-1.96 0L.17 13.23c-.46.78.09 1.77.97 1.77h13.72c.89 0 1.44-.99.98-1.77L8.98 1.57z"/><path d="M7 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zm.1-6a.9.9 0 1 1 1.8 0l-.35 3.5a.55.55 0 0 1-1.1 0L7.1 6z"/></svg>'));
}

/* ==============
button
=============== */

.sb-form .input :is(
    [type="button"],
    [type="submit"],
    [type="reset"],
    button
):not(.btn) {
    justify-content: center;

    transition: color .3s, border .3s, background .3s ease-out, box-shadow .3s;
    padding: var(--sb-btn-padding);
    width: unset;
    
    color: var(
        --sb-btn-color,
        var(--sb-background)
    );
    
    background-color: var(
        --sb-btn-background,
        var(--sb-theme-color)
    );
        
    background-image: radial-gradient(circle, var(--sb-btn-hover-background, rgba(0, 0, 0, .09)) 50%, transparent 50%);
    background-position: center top;
    background-repeat: no-repeat;

    background-size: 0;

    border: var(
        --sb-btn-border,
        solid
        1px
        var(
            --sb-btn-border-color,
            var(
                --sb-btn-background,
                transparent
            )
        )
    );

    box-shadow: var(--sb-btn-shadow, none);
}   


.sb-form .input > :is(
    [type="button"],
    [type="reset"],
    [type="submit"],
    button
):not(.btn):is(:hover, :focus) {
    color: var(
        --sb-btn-hover-color, 
        var(
            --sb-btn-color,
            var(--sb-background)
        )
    );

    background-size: 225%;

    border: var(
        --sb-btn-hover-border,
        var(
            --sb-btn-border,
            1px
            solid
            var(
                --sb-btn-hover-border-color,
                var(
                    --sb-btn-border-color,
                    var(
                        --sb-btn-hover-background,
                        var(
                            --sb-btn-background,
                            transparent
                        )
                    )
                )
            )
        )
    );

    box-shadow: var(--sb-btn-hover-shadow, var(--sb-btn-shadow, none));

} 

/* ==============
only child button
=============== */

.sb-form .input :is(
    [type="button"],
    [type="submit"],
    [type="reset"],
    button
):only-child:not(.input > li > *) {
    padding: 0 var(--sb-btn-padding-x);
    font-size: 1.1rem;
    position: absolute;
    inset: 0;
    min-height: 0;
    width: 100%;
}


/* ==============
empty button defaults
=============== */

.sb-form .input ::-ms-reveal { display: none; }

.sb-form .input :is(
    [type="button"],
    [type="submit"],
    [type="reset"],
    button
).reveal:empty {
    padding: 0;
    aspect-ratio: 1 / 1;

    --sb-svg: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M39 5A24 24 0 0 0 9 43l592 464a24 24 0 0 0 30-38l-105-82c39-41 66-86 80-119 3-8 3-16 0-24-15-36-47-88-93-131-47-44-112-81-193-81-68 0-125 26-169 61L39 5zm184 145a144 144 0 0 1 224 175l-39-30a96 96 0 0 0-84-135c-6 0-9 6-7 12a65 65 0 0 1-3 48l-91-70zm150 240a144 144 0 0 1-196-154l-94-74c-23 29-39 59-48 82-4 8-4 16 0 24 14 36 46 88 93 131a263 263 0 0 0 319 48l-74-57z"/></svg>');

    
    mask-size: 1.3rem;
}

.sb-form .input [type="text"] ~ :is(
    [type="button"],
    [type="submit"],
    [type="reset"],
    button
).reveal:empty {
    --sb-svg: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M288 32c-81 0-145 37-193 81-46 43-78 95-92 131-4 8-4 16 0 24 14 36 46 88 92 131 48 44 112 81 193 81s146-37 193-81c46-43 78-95 93-131 3-8 3-16 0-24-15-36-47-88-93-131-47-44-112-81-193-81zM144 256a144 144 0 1 1 288 0 144 144 0 1 1-288 0zm144-64a64 64 0 0 1-84 61c-6-2-12 1-12 7l3 21a96 96 0 1 0 97-121c-6 0-9 6-7 12s3 13 3 20z"/></svg>');
}  


/* ==============
icons
=============== */


.sb-form :is(.input, .input > li) > i {
    justify-content: center;
    background: var(--sb-icon-background, transparent);
    color: var(--sb-icon-color, var(--sb-theme-color));
    min-width: 2.7rem;
    font-size: 22px;
    aspect-ratio: 1;
    flex-grow: 0;
}


/* ==============
outline button
=============== */

.sb-form .input :is(
    [type="button"],
    [type="reset"],
    [type="submit"],
    button
):not(.btn).outline {
    --sb-btn-background:         var(--sb-background);
    --sb-btn-hover-background:   var(--sb-theme-color);
    
    --sb-btn-color:              var(--sb-theme-color);
    --sb-btn-hover-color:        var(--sb-btn-background);

    --sb-btn-border-color:       var(--sb-theme-color);
    --sb-btn-hover-border-color: var(--sb-theme-color);
}